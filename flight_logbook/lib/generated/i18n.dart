import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get actionLabel_add => "Add";
  String get actionLabel_delete => "Delete";
  String get confirm_delete_flight => "Delete this flight?";
  String get confirm_logout => "Logout?";
  String get dialog_title_confirmation => "Confirmation";
  String get dialog_title_error => "Error";
  String get error_failed_to_add_flight => "Failed to add flight.";
  String get fieldName_AIRCRAFT_REGISTRATION => "Aircraft registration";
  String get fieldName_AIRCRAFT_TYPE => "Aircraft type";
  String get fieldName_AIRLINE => "Airline";
  String get fieldName_ARRIVAL_AIRPORT => "Arrival airport";
  String get fieldName_ARRIVAL_GATE => "Arrival gate";
  String get fieldName_ARRIVAL_TIME => "Actual arrival time";
  String get fieldName_ARRIVAL_TIMEZONE_ => "Arrival timezone";
  String get fieldName_ARRIVAL_WEATHER => "Arrival weather";
  String get fieldName_DEPARTURE_AIRPORT => "Dep. airport";
  String get fieldName_DEPARTURE_DATE => "Dep. date";
  String get fieldName_DEPARTURE_GATE => "Dep. gate";
  String get fieldName_DEPARTURE_TIME => "Actual departure time";
  String get fieldName_DEPARTURE_TIMEZONE_ => "Dep. timezone";
  String get fieldName_DEPARTURE_WEATHER => "Dep. weather";
  String get fieldName_FLIGHT_NUMBER => "Flight number";
  String get fieldName_LANDING_RUNWAY => "Landing runway";
  String get fieldName_LANDING_TIME => "Landing time";
  String get fieldName_MEMO => "Memo";
  String get fieldName_SCHEDULED_ARRIVAL_TIME => "Scheduled arrival time";
  String get fieldName_SCHEDULED_DEPARTURE_TIME => "Scheduled departure time";
  String get fieldName_SEAT_NUMBER => "Seat number";
  String get fieldName_SERVICE_CLASS => "Service class";
  String get fieldName_TAKE_OFF_RUNWAY => "Take-off runway";
  String get fieldName_TAKE_OFF_TIME => "Take-off time";
  String get login => "Login";
  String get loginIdLabel => "Email";
  String get login_failure => "Login failure";
  String get logout => "Logout";
  String get mandatory => "(mandatory)";
  String get passwordLabel => "Password";
  String get settingLabel_colorScheme => "Color scheme";
  String get settingValue_colorScheme_ana => "ANA";
  String get settingValue_colorScheme_jal => "JAL";
  String get settings => "Settings";
  String get showPassword => "Show password";
  String error_empty_field(String label) => "${label} is  mandatory.";
  String error_invalid_value_format(String fieldName) => "The format of $fieldName is invalid.";
}

class $ja extends S {
  const $ja();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get fieldName_ARRIVAL_AIRPORT => "到着空港";
  @override
  String get fieldName_SCHEDULED_DEPARTURE_TIME => "出発予定時刻";
  @override
  String get fieldName_TAKE_OFF_RUNWAY => "離陸滑走路";
  @override
  String get fieldName_LANDING_RUNWAY => "着陸滑走路";
  @override
  String get fieldName_DEPARTURE_TIMEZONE_ => "出発地タイムゾーン";
  @override
  String get fieldName_DEPARTURE_DATE => "搭乗日";
  @override
  String get fieldName_SEAT_NUMBER => "座席番号";
  @override
  String get login => "ログイン";
  @override
  String get mandatory => "(必須)";
  @override
  String get passwordLabel => "パスワード";
  @override
  String get fieldName_DEPARTURE_WEATHER => "出発地の天候";
  @override
  String get login_failure => "ログインできませんでした。";
  @override
  String get fieldName_ARRIVAL_GATE => "到着ゲート";
  @override
  String get fieldName_DEPARTURE_TIME => "出発時刻";
  @override
  String get loginIdLabel => "メールアドレス";
  @override
  String get logout => "ログアウト";
  @override
  String get actionLabel_add => "追加";
  @override
  String get fieldName_AIRLINE => "航空会社";
  @override
  String get fieldName_SERVICE_CLASS => "サービスクラス";
  @override
  String get settingValue_colorScheme_ana => "ANA";
  @override
  String get dialog_title_confirmation => "確認";
  @override
  String get settingLabel_colorScheme => "カラースキーム";
  @override
  String get fieldName_MEMO => "メモ";
  @override
  String get fieldName_DEPARTURE_AIRPORT => "出発空港";
  @override
  String get error_failed_to_add_flight => "フライトの作成に失敗しました。";
  @override
  String get fieldName_AIRCRAFT_REGISTRATION => "機体記号";
  @override
  String get settings => "設定";
  @override
  String get confirm_logout => "ログアウトしますか？";
  @override
  String get fieldName_ARRIVAL_TIMEZONE_ => "到着地タイムゾーン";
  @override
  String get settingValue_colorScheme_jal => "JAL";
  @override
  String get fieldName_FLIGHT_NUMBER => "便名";
  @override
  String get fieldName_ARRIVAL_WEATHER => "到着地の天候";
  @override
  String get fieldName_SCHEDULED_ARRIVAL_TIME => "到着予定時刻";
  @override
  String get fieldName_AIRCRAFT_TYPE => "機材";
  @override
  String get fieldName_DEPARTURE_GATE => "出発ゲート";
  @override
  String get fieldName_ARRIVAL_TIME => "到着時刻";
  @override
  String get dialog_title_error => "エラー";
  @override
  String get actionLabel_delete => "削除";
  @override
  String get showPassword => "パスワードを表示";
  @override
  String get confirm_delete_flight => "フライトを削除しますか？";
  @override
  String get fieldName_LANDING_TIME => "着陸時刻";
  @override
  String get fieldName_TAKE_OFF_TIME => "離陸時刻";
  @override
  String error_empty_field(String label) => "${label}を入力してください。";
  @override
  String error_invalid_value_format(String fieldName) => "${fieldName}の形式が正しくありません。";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("ja", ""),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "ja":
          S.current = const $ja();
          return SynchronousFuture<S>(S.current);
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
